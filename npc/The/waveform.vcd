$version Generated by VerilatedVcd $end
$timescale 1s $end

 $scope module top $end
  $var wire  1 ] clk $end
  $var wire 32 _ inst [31:0] $end
  $var wire 32 ` pc [31:0] $end
  $var wire  1 ^ rst $end
  $scope module rv32 $end
   $var wire  1 ' aluc [0:0] $end
   $var wire  1 ] clk $end
   $var wire  1 9 clk1_flag $end
   $var wire  1 : clk2_flag $end
   $var wire  7 d funct7 [6:0] $end
   $var wire 32 ( imm [31:0] $end
   $var wire 32 _ inst [31:0] $end
   $var wire  1 & m1 $end
   $var wire 32 , num1 [31:0] $end
   $var wire 32 . num2 [31:0] $end
   $var wire 32 ` pc [31:0] $end
   $var wire  5 c rd [4:0] $end
   $var wire 32 + result [31:0] $end
   $var wire  5 a rs1 [4:0] $end
   $var wire  5 b rs2 [4:0] $end
   $var wire  1 ^ rst $end
   $var wire 32 , src1 [31:0] $end
   $var wire 32 - src2 [31:0] $end
   $var wire  3 % type4 [2:0] $end
   $scope module PC_inst $end
    $var wire  1 ] clk $end
    $var wire  1 : clk2_flag $end
    $var wire 32 ` pc [31:0] $end
    $var wire  1 ^ rst $end
   $upscope $end
   $scope module alu_inst $end
    $var wire  1 ' aluc $end
    $var wire 32 , num1 [31:0] $end
    $var wire 32 . num2 [31:0] $end
    $var wire 32 + result [31:0] $end
   $upscope $end
   $scope module clk_count_inst $end
    $var wire  1 ] clk $end
    $var wire  1 9 clk1_flag $end
    $var wire  1 : clk2_flag $end
    $var wire  2 ; clk_cnt [1:0] $end
    $var wire  1 ^ rst $end
   $upscope $end
   $scope module control_unit_inst $end
    $var wire  1 ' aluc $end
    $var wire  3 f fun3_14_12 [2:0] $end
    $var wire  7 d fun7_31_25 [6:0] $end
    $var wire 32 _ inst [31:0] $end
    $var wire  1 & m1 $end
    $var wire  7 e opcode_6_0 [6:0] $end
    $var wire  5 c rd_11_7 [4:0] $end
    $var wire  5 a rs1_19_15 [4:0] $end
    $var wire  5 b rs2_24_20 [4:0] $end
    $var wire  3 % type1 [2:0] $end
   $upscope $end
   $scope module i1 $end
    $var wire 32 i DATA_LEN [31:0] $end
    $var wire 32 h KEY_LEN [31:0] $end
    $var wire 32 g NR_KEY [31:0] $end
    $var wire  1 & key [0:0] $end
    $var wire 66 / lut [65:0] $end
    $var wire 32 . out [31:0] $end
    $scope module i0 $end
     $var wire 32 i DATA_LEN [31:0] $end
     $var wire 32 j HAS_DEFAULT [31:0] $end
     $var wire 32 h KEY_LEN [31:0] $end
     $var wire 32 g NR_KEY [31:0] $end
     $var wire 32 l PAIR_LEN [31:0] $end
     $var wire 32 6 data_list[0] [31:0] $end
     $var wire 32 7 data_list[1] [31:0] $end
     $var wire 32 k default_out [31:0] $end
     $var wire  1 ) hit $end
     $var wire 32 m i [31:0] $end
     $var wire  1 & key [0:0] $end
     $var wire  1 # key_list[0] [0:0] $end
     $var wire  1 $ key_list[1] [0:0] $end
     $var wire 66 / lut [65:0] $end
     $var wire 32 8 lut_out [31:0] $end
     $var wire 32 . out [31:0] $end
     $var wire 33 2 pair_list[0] [32:0] $end
     $var wire 33 4 pair_list[1] [32:0] $end
    $upscope $end
   $upscope $end
   $scope module imm_extend_inst $end
    $var wire  7 d funct7 [6:0] $end
    $var wire 32 ( imm32 [31:0] $end
    $var wire 12 * imm_12 [11:0] $end
    $var wire  5 b rs2 [4:0] $end
    $var wire  3 % type3 [2:0] $end
    $scope module Extend_12_inst $end
     $var wire 12 * imm_12 [11:0] $end
     $var wire 32 ( imm_12_to_32 [31:0] $end
    $upscope $end
    $scope module RISB_type_inst $end
     $var wire  7 d funct7 [6:0] $end
     $var wire 12 * imm_12 [11:0] $end
     $var wire  5 b rs2 [4:0] $end
     $var wire  3 % type2 [2:0] $end
    $upscope $end
   $upscope $end
   $scope module register_file_inst $end
    $var wire  1 ] clk $end
    $var wire  1 9 clk1_flag $end
    $var wire 32 < i [31:0] $end
    $var wire  5 c rd [4:0] $end
    $var wire 32 = regs[0] [31:0] $end
    $var wire 32 G regs[10] [31:0] $end
    $var wire 32 H regs[11] [31:0] $end
    $var wire 32 I regs[12] [31:0] $end
    $var wire 32 J regs[13] [31:0] $end
    $var wire 32 K regs[14] [31:0] $end
    $var wire 32 L regs[15] [31:0] $end
    $var wire 32 M regs[16] [31:0] $end
    $var wire 32 N regs[17] [31:0] $end
    $var wire 32 O regs[18] [31:0] $end
    $var wire 32 P regs[19] [31:0] $end
    $var wire 32 > regs[1] [31:0] $end
    $var wire 32 Q regs[20] [31:0] $end
    $var wire 32 R regs[21] [31:0] $end
    $var wire 32 S regs[22] [31:0] $end
    $var wire 32 T regs[23] [31:0] $end
    $var wire 32 U regs[24] [31:0] $end
    $var wire 32 V regs[25] [31:0] $end
    $var wire 32 W regs[26] [31:0] $end
    $var wire 32 X regs[27] [31:0] $end
    $var wire 32 Y regs[28] [31:0] $end
    $var wire 32 Z regs[29] [31:0] $end
    $var wire 32 ? regs[2] [31:0] $end
    $var wire 32 [ regs[30] [31:0] $end
    $var wire 32 \ regs[31] [31:0] $end
    $var wire 32 @ regs[3] [31:0] $end
    $var wire 32 A regs[4] [31:0] $end
    $var wire 32 B regs[5] [31:0] $end
    $var wire 32 C regs[6] [31:0] $end
    $var wire 32 D regs[7] [31:0] $end
    $var wire 32 E regs[8] [31:0] $end
    $var wire 32 F regs[9] [31:0] $end
    $var wire 32 + result [31:0] $end
    $var wire  5 a rs1 [4:0] $end
    $var wire  5 b rs2 [4:0] $end
    $var wire  1 ^ rst $end
    $var wire 32 , src1 [31:0] $end
    $var wire 32 - src2 [31:0] $end
    $var wire  1 9 wen $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
1#
0$
b000 %
1&
1'
b00000000000000000000000000000000 (
1)
b000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b000000000000000000000000000000000100000000000000000000000000000000 /
b100000000000000000000000000000000 2
b000000000000000000000000000000000 4
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
09
0:
b00 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
0]
0^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000 a
b00000 b
b00000 c
b0000000 d
b0000000 e
b000 f
b00000000000000000000000000000010 g
b00000000000000000000000000000001 h
b00000000000000000000000000100000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000100001 l
b00000000000000000000000000000010 m
#1
19
b01 ;
1]
#2
0]
1^
#3
09
b00 ;
b00000000000000000000000000100000 <
1]
b10000000000000000000000000000000 `
#4
b010 %
b11111111111111111111111111111100 (
b111111111100 *
b11111111111111111111111111111100 +
b11111111111111111111111111111100 .
b000000000000000000000000000000000111111111111111111111111111111100 /
b111111111111111111111111111111100 2
b11111111111111111111111111111100 6
b11111111111111111111111111111100 8
0]
0^
b11111111110000010000000100010011 _
b00010 a
b11100 b
b00010 c
b1111111 d
b0010011 e
#5
19
b01 ;
1]
#6
0]
#7
b11111111111111111111111111111000 +
b11111111111111111111111111111100 ,
09
1:
b10 ;
b11111111111111111111111111111100 ?
1]
#8
0]
#9
0:
b00 ;
1]
b10000000000000000000000000000100 `
#10
b00000000000000000000000001100100 (
b000001100100 *
b00000000000000000000000001100100 +
b00000000000000000000000000000000 ,
b00000000000000000000000001100100 .
b000000000000000000000000000000000100000000000000000000000001100100 /
b100000000000000000000000001100100 2
b00000000000000000000000001100100 6
b00000000000000000000000001100100 8
0]
b00000110010000000000010110010011 _
b00000 a
b00100 b
b01011 c
b0000011 d
#11
19
b01 ;
1]
#12
0]
#13
09
1:
b10 ;
b00000000000000000000000001100100 H
1]
#14
0]
#15
0:
b00 ;
1]
b10000000000000000000000000001000 `
#16
b00000000000000000000000011001000 +
b00000000000000000000000001100100 ,
0]
b00000110010001011000011000010011 _
b01011 a
b01100 c
#17
19
b01 ;
1]
#18
0]
#19
09
1:
b10 ;
b00000000000000000000000011001000 I
1]
#20
0]
#21
0:
b00 ;
1]
b10000000000000000000000000001100 `
#22
b00000000000000000000000011001000 (
b000011001000 *
b00000000000000000000000110010000 +
b00000000000000000000000011001000 ,
b00000000000000000000000011001000 .
b000000000000000000000000000000000100000000000000000000000011001000 /
b100000000000000000000000011001000 2
b00000000000000000000000011001000 6
b00000000000000000000000011001000 8
0]
b00001100100001100000011010010011 _
b01100 a
b01000 b
b01101 c
b0000110 d
#23
19
b01 ;
1]
#24
0]
#25
09
1:
b10 ;
b00000000000000000000000110010000 J
1]
#26
0]
#27
0:
b00 ;
1]
b10000000000000000000000000010000 `
#28
b11111111111111111111111011010100 (
b111011010100 *
b00000000000000000000000001100100 +
b00000000000000000000000110010000 ,
b11111111111111111111111011010100 .
b000000000000000000000000000000000111111111111111111111111011010100 /
b111111111111111111111111011010100 2
b11111111111111111111111011010100 6
b11111111111111111111111011010100 8
0]
b11101101010001101000011100010011 _
b01101 a
b10100 b
b01110 c
b1110110 d
#29
19
b01 ;
1]
#30
0]
#31
09
1:
b10 ;
b00000000000000000000000001100100 K
1]
#32
0]
#33
0:
b00 ;
1]
b10000000000000000000000000010100 `
#34
b11111111111111111111111001110000 (
b111001110000 *
b11111111111111111111111011010100 +
b00000000000000000000000001100100 ,
b11111111111111111111111001110000 .
b000000000000000000000000000000000111111111111111111111111001110000 /
b111111111111111111111111001110000 2
b11111111111111111111111001110000 6
b11111111111111111111111001110000 8
0]
b11100111000001110000011110010011 _
b01110 a
b10000 b
b01111 c
b1110011 d
#35
19
b01 ;
1]
#36
0]
#37
09
1:
b10 ;
b11111111111111111111111011010100 L
1]
#38
0]
#39
0:
b00 ;
1]
b10000000000000000000000000011000 `
#40
b11111111111111111111100000000001 (
b100000000001 *
b11111111111111111111011011010101 +
b11111111111111111111111011010100 ,
b11111111111111111111100000000001 .
b000000000000000000000000000000000111111111111111111111100000000001 /
b111111111111111111111100000000001 2
b11111111111111111111100000000001 6
b11111111111111111111100000000001 8
0]
b10000000000101111000100000010011 _
b01111 a
b00001 b
b10000 c
b1000000 d
#41
19
b01 ;
1]
#42
0]
#43
09
1:
b10 ;
b11111111111111111111011011010101 M
1]
#44
0]
#45
0:
b00 ;
1]
b10000000000000000000000000011100 `
#46
b00000000000000000000011111111010 (
b011111111010 *
b11111111111111111111111011001111 +
b11111111111111111111011011010101 ,
b00000000000000000000011111111010 .
b000000000000000000000000000000000100000000000000000000011111111010 /
b100000000000000000000011111111010 2
b00000000000000000000011111111010 6
b00000000000000000000011111111010 8
0]
b01111111101010000000100010010011 _
b10000 a
b11010 b
b10001 c
b0111111 d
#47
19
b01 ;
1]
#48
0]
#49
09
1:
b10 ;
b11111111111111111111111011001111 N
1]
#50
0]
#51
0:
b00 ;
1]
b10000000000000000000000000100000 `
#52
b00000000000000000000000000000001 (
b000000000001 *
b00000000000000000000000000000001 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000001 .
b000000000000000000000000000000000100000000000000000000000000000001 /
b100000000000000000000000000000001 2
b00000000000000000000000000000001 6
b00000000000000000000000000000001 8
0]
b00000000000100000000000001110011 _
b00000 a
b00001 b
b00000 c
b0000000 d
b1110011 e
#53
19
b01 ;
1]
